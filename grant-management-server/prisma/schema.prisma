// Generator and Datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum MessageStatus {
  SENT
  DELIVERED
  READ
}
enum Role {
  ADMIN
  SUPERVISOR
  STUDENT
  SPONSOR
  INDIVIDUAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ApplicationStatus {
  DRAFT
  PENDING
  UNDER_REVIEW
  UN_COMPLETE
  UPDATED
  APPROVED
  REJECTED
}

enum StudentType {
  NEW
  CURRENT
}

enum TicketStatus {
  OPEN
  CLOSED
}

enum NotificationType {
  APPLICATION
  TICKET
  MESSAGE
  APPLICATION_APPROVED
  APPLICATION_REJECTED
  APPLICATION_UPDATE
  APPLICATION_RESPONSE
  TASK_ASSIGNED
  TASK_COMPLETED
  PAYMENT_DUE
  PAYMENT_COMPLETED
}

enum StudySource {
  SELF_FUNDED
  SCHOLARSHIP
}

enum ResidenceType {
  FAMILY
  PRIVATE_HOUSING
  DORMITORY
}

enum ParentStatus {
  ALIVE
  DECEASED
  MISSING
}

enum SupportType {
  FULL_SCHOLARSHIP
  PARTIAL_SCHOLARSHIP
  TUITION_ONLY
  PERSONAL_EXPENSES
}

enum StudyType{
  NEW_STUDENT
  CURRENT_STUDENT
}
enum GpaType {
  GPA_4
  PERCENTAGE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum GrantType {
  SPONSOR
  INDIVIDUAL
}

enum FileType {
  ID
  ACADEMIC
  MEDICAL
  SUPPORTING
  OTHER
}

enum FieldType {
  FILE
  TEXT
}

enum FieldStatus {
  PENDING
  COMPLETED
}

// Core Models

model User {
  id               Int               @id @default(autoincrement())
  role             Role              @default(STUDENT)
  email            String?           @unique
  password         String?           @db.VarChar(64)
  isActive         Boolean           @default(true)
  emailConfirmed   Boolean           @default(false)
  personalInfo     PersonalInfo?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  applications     Application[]     @relation("UserApplications")
  reviewedApps     Application[]     @relation("Review")
  superVisorGrants       UserGrant[]  @relation("GrantSuperVisor")
  tickets          Ticket[]
  tasks            Task[]
  messages         Message[]
  userGrants       UserGrant[]
  viewGrants       Grant[]           @relation("GrantViewAccess")
  sentMessages     DirectMessage[]   @relation("SentMessages")
  receivedMessages DirectMessage[]   @relation("ReceivedMessages")
  notifications    Notification[]
}

model PersonalInfo {
  id               Int                @id @default(autoincrement())
  userId           Int                @unique
  user             User               @relation(fields: [userId], references: [id])
  basicInfoId      Int?               @unique
  contactInfoId    Int?               @unique
  studyInfoId      Int?               @unique

  basicInfo        BasicInfo?         @relation(fields: [basicInfoId], references: [id])
  contactInfo      ContactInfo?       @relation(fields: [contactInfoId], references: [id])
  studyInfo        StudyInformation?  @relation(fields: [studyInfoId], references: [id])
}

model BasicInfo {
  id               Int                @id @default(autoincrement())
  name             String
  fatherName       String?
  familyName       String?
  nationality      String?
  residenceCountry String?
  passport         String?
  gender           String?
  birthDate        DateTime?
  hasDisability    Boolean?
  disability       String?

  personalInfo     PersonalInfo?
}

model ContactInfo {
  id               Int                @id @default(autoincrement())
  phone            String
  whatsapp         String?
  facebook         String?
  instagram        String?
  twitter          String?

  personalInfo     PersonalInfo?
}

model StudyInformation {
  id               Int                @id @default(autoincrement())
  programType      String
  university       String
  college          String
  department       String
  year             String
  studentIdNo      String

  personalInfo     PersonalInfo?
}

// Application Models

model Application {
  id                Int               @id @default(autoincrement())
  studentId         Int
  supervisorId      Int?
  status            ApplicationStatus @default(PENDING)
  rejectReason      String?
  scholarshipInfo   ScholarshipInfo?
  academicPerformance AcademicPerformance?
  residenceInfo     ResidenceInformation?
  supportingFiles   SupportingFiles?
  siblings          Sibling[]
  commitment        Boolean?
  scholarshipTerms  Boolean?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  student           User              @relation("UserApplications", fields: [studentId], references: [id])
  supervisor        User?             @relation("Review", fields: [supervisorId], references: [id])
  updates           File[]
  askedFields       AskedField[]
  improvementRequests ImprovementRequest[]
  userGrants        UserGrant[]
}

model ScholarshipInfo {
  id               Int                @id @default(autoincrement())
  supportType      SupportType
  annualTuitionFee Float?
  providedAmount   Float?
  requestedAmount  Float?
  applicationId    Int                @unique

  application      Application        @relation(fields: [applicationId], references: [id])
}

model AcademicPerformance {
  id               Int                @id @default(autoincrement())
  typeOfStudy StudyType
  gpaType          GpaType
  gpaValue         Float?
  transcript       String?
  applicationId    Int                @unique
  application      Application        @relation(fields: [applicationId], references: [id])
}


model ResidenceInformation {
  id               Int                @id @default(autoincrement())
  residenceType    ResidenceType
  fatherStatus     ParentStatus?
  fatherIncome     Float?
  motherStatus     ParentStatus?
  motherIncome     Float?
  familyIncome     Float?
  city             String?
  country          String?
  address          String?
  applicationId    Int                @unique

  application      Application        @relation(fields: [applicationId], references: [id])
}

model SupportingFiles {
  id               Int                @id @default(autoincrement())
  personalId       String?
  studentDoc      String?
  medicalReport    String?
  personalPhoto    String?
  proofOfAddress   String?
  applicationId    Int                @unique

  application      Application        @relation(fields: [applicationId], references: [id])
}

model Sibling {
  id               Int                @id @default(autoincrement())
  name             String
  relation         String
  university        String
  college String
  department String
  studyYear  DateTime
  sourceOfStudy    StudySource
  grantSource      String?
  grantAmount      Float?
  document         String?
  createdAt        DateTime           @default(now())
  applicationId    Int
  application      Application        @relation(fields: [applicationId], references: [id])
}

// Grants and Payments

model Grant {
  id               Int                @id @default(autoincrement())
  name             String
  type             GrantType
  amount           Float
  amountLeft    Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userGrants       UserGrant[]
  viewAccessUsers  User[]             @relation("GrantViewAccess")
}

model UserGrant {
  id               Int                @id @default(autoincrement())
  userId           Int
  grantId          Int
  supervisorId      Int?
  applicationId    Int
  payments         Payment[]
  createdAt        DateTime           @default(now())
  startDate       DateTime
  endDate        DateTime
  payEvery       String
  supervisor        User?             @relation("GrantSuperVisor", fields: [supervisorId], references: [id])
  totalAmounts Float
  user             User               @relation(fields: [userId], references: [id])
  grant            Grant              @relation(fields: [grantId], references: [id])
  application      Application        @relation(fields: [applicationId], references: [id])
}

model Payment {
  id               Int                @id @default(autoincrement())
  userGrantId      Int
  amount           Float
  amountPaid    Float?
  dueDate          DateTime
  paidAt           DateTime?
  status           PaymentStatus      @default(PENDING)
  createdAt        DateTime           @default(now())

  userGrant        UserGrant          @relation(fields: [userGrantId], references: [id])
  invoice          Invoice?
}

model Invoice {
  id               Int                @id @default(autoincrement())
  invoiceNumber    String             @unique
  paymentId        Int                @unique
  dueDate          DateTime
  status           PaymentStatus      @default(PENDING)
  amount           Float
  paidAt           DateTime?
  createdAt        DateTime           @default(now())

  payment          Payment            @relation(fields: [paymentId], references: [id])
}

// Admin Requests

model ImprovementRequest {
  id               Int                @id @default(autoincrement())
  title            String
  message          String
  status           FieldStatus        @default(PENDING)
  applicationId    Int

  application      Application        @relation(fields: [applicationId], references: [id])
}
model AskedField {
  id               Int                @id @default(autoincrement())
  title            String
  message          String
  type             FieldType
  status           FieldStatus        @default(PENDING)
  value            String?
  applicationId    Int

  application      Application        @relation(fields: [applicationId], references: [id])
}

// Miscellaneous

model Notification {
  id               Int                @id @default(autoincrement())
  content          String
  href                 String?
  type             NotificationType
  isRead           Boolean            @default(false)
  userId           Int
  createdAt        DateTime           @default(now())
  user             User               @relation(fields: [userId], references: [id])
}

model Ticket {
  id               Int                @id @default(autoincrement())
  title            String
  content          String
  status           TicketStatus       @default(OPEN)
  createdAt        DateTime           @default(now())
  userId           Int
  user             User               @relation(fields: [userId], references: [id])
  messages         Message[]
}

model Message {
  id               Int                @id @default(autoincrement())
  ticketId         Int
  content          String
  senderId         Int
  createdAt        DateTime           @default(now())
  ticket           Ticket             @relation(fields: [ticketId], references: [id])
  sender           User               @relation(fields: [senderId], references: [id])
}

model DirectMessage {
  id               Int                @id @default(autoincrement())
  content          String
  senderId         Int
  receiverId       Int
  status           MessageStatus      @default(SENT)
  createdAt        DateTime           @default(now())
  sender           User               @relation("SentMessages", fields: [senderId], references: [id])
  receiver         User               @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Task {
  id               Int                @id @default(autoincrement())
  description      String
  status           TaskStatus         @default(PENDING)
  supervisorId     Int
  supervisor       User               @relation(fields: [supervisorId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model FAQ {
  id               Int                @id @default(autoincrement())
  question         String
  answer           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model File {
  id               Int                @id @default(autoincrement())
  fileType         FileType           @default(OTHER)
  title            String?
  description      String?
  url              String
  createdAt        DateTime           @default(now())

  applicationId    Int?
  application      Application?       @relation(fields: [applicationId], references: [id])

}
